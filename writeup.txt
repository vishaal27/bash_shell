I have implemented a simple shell using the fork, exec and wait system calls. 
This is the approach that i have used:
- The entire code is present within a while true loop that will continue to run until an exit command is encountered.  
- I first print a prompt 'ush>>>' and then take the line input entered into the shell using fgets()
- Then, I have parsed this line input into an array of string arguments by iterating over the line input using pointers.
- Thus, now the user command as well as all the arguments passed to it will be set into an array of strings called 'arguments'. arguments[0] contains the name of the command itself and subsequent arguments are present in the further indices of the array.
- Next, I have two checks to check if the command entered was exit or cd command. If it is an exit command, I break from the while true loop. If it is a cd command, then the directory to change to will be present in the argument[1] string. This will then passed to the chdir() function which will make the passed argument the current working directory.
- The next step was to use the fork() function to create a child process. The command entered will be executed in this child process without any change happening in the parent process.
-  So, we check if it is a child process by checking if the pid is a 0. Then we use the execvp command to execute the command entered in. As soon as the child process has finished executing, we exit() from the child process so as to return to the parent process.
- If it is not a child process, then the we use the wait() function to ask the parent process to wait until the child process has finished executing. 




mkdir
-v,--verbose
-p, --parents

cat
-n, --number
-E, --show-ends

rm
-i
-v, --verbose

ls 
-a --all
-i 
-d --directory

date
-R --rfc-2822
-u --utc --universal

history
echo -n,-E
pwd 